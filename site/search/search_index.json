{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"LyriX Docs","text":"<p>Resumo r\u00e1pido do reposit\u00f3rio e instru\u00e7\u00f5es principais.</p> <ul> <li>Vers\u00e3o: v0.1-pc1</li> <li>Data de entrega PC1: 29/09/2025</li> <li>Link do reposit\u00f3rio: https://github.com/TPPE-VictorGuimaraes/</li> </ul>"},{"location":"overview/","title":"Vis\u00e3o Geral","text":"<p>Breve descri\u00e7\u00e3o do projeto, objetivo e escopo dos ponto de controles.</p>"},{"location":"overview/#ponto-de-controle-1","title":"Ponto de Controle 1","text":""},{"location":"overview/#ponto-de-controle-2","title":"Ponto de Controle 2","text":""},{"location":"overview/#ponto-de-controle-3","title":"Ponto de Controle 3","text":""},{"location":"ambiente/ambiente-db-docker/","title":"Ambiente - Banco de Dados (Docker)","text":"<ul> <li><code>docker-compose.yml</code> usado: </li> <li>Comandos:</li> <li><code>docker-compose up -d</code></li> <li><code>docker-compose down</code></li> <li>Volume e persist\u00eancia</li> </ul>"},{"location":"ambiente/ambiente-db-ide/","title":"Ambiente - BD (IDE / Conex\u00e3o)","text":"<ul> <li>Configura\u00e7\u00f5es de conex\u00e3o</li> <li>Exemplo para IntelliJ / DataGrip / Android Studio</li> <li>SQL de cria\u00e7\u00e3o de tabela <code>songs</code> (exemplo)</li> </ul>"},{"location":"ambiente/ambiente-locker/","title":"Ambiente - Locker","text":"<ul> <li>O que \u00e9: onde guardar vari\u00e1veis sens\u00edveis (n\u00e3o versionar).</li> <li>Arquivo de exemplo: <code>.env.example</code></li> <li>Observa\u00e7\u00f5es de seguran\u00e7a.</li> </ul>"},{"location":"arquitetura/arquitetura/","title":"Arquitetura do Projeto","text":""},{"location":"arquitetura/arquitetura/#introducao","title":"Introdu\u00e7\u00e3o","text":"<p>Na constru\u00e7\u00e3o de aplicativos m\u00f3veis, a arquitetura \u00e9 um dos fatores mais importantes para garantir que o sistema seja escal\u00e1vel, test\u00e1vel, de f\u00e1cil manuten\u00e7\u00e3o e evolutivo.  </p> <p>Existem diferentes abordagens utilizadas no desenvolvimento de apps Android, como:</p> <ul> <li>Arquitetura em camadas simples (MVC): onde a interface de usu\u00e1rio, l\u00f3gica de neg\u00f3cio e acesso a dados est\u00e3o mais acoplados. Apesar de f\u00e1cil de implementar, tende a gerar problemas de manuten\u00e7\u00e3o em projetos maiores.</li> <li>MVP (Model\u2013View\u2013Presenter): separa a l\u00f3gica de apresenta\u00e7\u00e3o da UI, mas ainda pode gerar acoplamento em cen\u00e1rios complexos.</li> <li>MVVM (Model\u2013View\u2013ViewModel): modelo amplamente utilizado em conjunto com as bibliotecas do Jetpack. Facilita a separa\u00e7\u00e3o entre a camada de interface (View) e a l\u00f3gica de apresenta\u00e7\u00e3o (ViewModel), permitindo uma melhor testabilidade.</li> <li>Clean Architecture: proposta por Robert C. Martin (Uncle Bob), organiza o software em camadas conc\u00eantricas, onde as regras de neg\u00f3cio ficam isoladas das implementa\u00e7\u00f5es de frameworks. Essa abordagem garante independ\u00eancia, baixo acoplamento e alta manutenibilidade.</li> </ul>"},{"location":"arquitetura/arquitetura/#arquitetura-escolhida","title":"Arquitetura Escolhida","text":"<p>Neste projeto, foi adotada uma combina\u00e7\u00e3o entre Clean Architecture e o padr\u00e3o MVVM, utilizando Jetpack Compose para a interface de usu\u00e1rio.  </p> <p>Essa escolha foi feita para garantir:</p> <ul> <li>Separa\u00e7\u00e3o de responsabilidades clara entre UI, l\u00f3gica de neg\u00f3cio e dados.  </li> <li>Testabilidade (use cases e ViewModels podem ser testados isoladamente).  </li> <li>Escalabilidade, permitindo adicionar novas features sem comprometer o c\u00f3digo existente.  </li> <li>Ado\u00e7\u00e3o de tecnologias modernas do ecossistema Android (Compose, Hilt, Coroutines, Flow, Room, Retrofit).  </li> </ul>"},{"location":"arquitetura/arquitetura/#estrutura-em-camadas","title":"Estrutura em Camadas","text":"<p>A arquitetura \u00e9 dividida em tr\u00eas camadas principais, alinhadas com Clean Architecture:</p>"},{"location":"arquitetura/arquitetura/#1-camada-de-apresentacao-presentation","title":"1. Camada de Apresenta\u00e7\u00e3o (Presentation)","text":"<ul> <li>Respons\u00e1vel pela interface gr\u00e1fica (UI).</li> <li>Implementada com Jetpack Compose.</li> <li>Usa o padr\u00e3o MVVM com <code>ViewModel</code> para gerenciar estado e l\u00f3gica de apresenta\u00e7\u00e3o.</li> <li>Comunica\u00e7\u00e3o ass\u00edncrona com os casos de uso (UseCases) via Coroutines e Flow.</li> </ul>"},{"location":"arquitetura/arquitetura/#2-camada-de-dominio-domain","title":"2. Camada de Dom\u00ednio (Domain)","text":"<ul> <li>Cont\u00e9m as regras de neg\u00f3cio e casos de uso (UseCases).</li> <li>Define interfaces de reposit\u00f3rio para abstrair fontes de dados.</li> <li>Independente de frameworks, garante que o dom\u00ednio n\u00e3o dependa de detalhes de implementa\u00e7\u00e3o.</li> </ul>"},{"location":"arquitetura/arquitetura/#3-camada-de-dados-data","title":"3. Camada de Dados (Data)","text":"<ul> <li>Implementa os reposit\u00f3rios definidos no dom\u00ednio.</li> <li>Cont\u00e9m:</li> <li>Remote Data Source (ex.: Retrofit + API REST).</li> <li>Local Data Source (ex.: Room Database).</li> <li>Faz a convers\u00e3o de modelos (DTOs \u2194 Entities \u2194 Domain Models).</li> </ul>"},{"location":"arquitetura/arquitetura/#fluxo-de-dados","title":"Fluxo de Dados","text":"<p>O fluxo de dados segue o seguinte caminho:</p> <p>[UI/Compose] &lt;--&gt; [ViewModel] &lt;--&gt; [UseCases] &lt;--&gt; [Repository Interface]</p> <p>[Remote API] [Local DB]</p> <ol> <li>A UI (Compose) dispara uma a\u00e7\u00e3o do usu\u00e1rio.  </li> <li>O ViewModel interpreta o evento e chama um UseCase.  </li> <li>O UseCase consulta o Reposit\u00f3rio (definido no dom\u00ednio).  </li> <li>O Reposit\u00f3rio decide buscar no Remote (API) ou no Local (Room).  </li> <li>O resultado percorre o caminho inverso at\u00e9 a UI, que exibe o estado atualizado.  </li> </ol>"},{"location":"arquitetura/arquitetura/#tecnologias-utilizadas","title":"Tecnologias Utilizadas","text":"<ul> <li>Kotlin \u2014 linguagem principal.  </li> <li>Jetpack Compose \u2014 UI declarativa.  </li> <li>ViewModel + StateFlow \u2014 gerenciamento de estado.  </li> <li>Hilt (Dagger) \u2014 inje\u00e7\u00e3o de depend\u00eancia.  </li> <li>Coroutines + Flow \u2014 opera\u00e7\u00f5es ass\u00edncronas.  </li> <li>Room \u2014 banco de dados local.  </li> <li>Retrofit + OkHttp \u2014 consumo de APIs REST.  </li> <li>Timber \u2014 logging.  </li> </ul>"},{"location":"arquitetura/arquitetura/#conclusao","title":"Conclus\u00e3o","text":"<p>Com essa arquitetura, o projeto se mant\u00e9m modular, escal\u00e1vel e de f\u00e1cil manuten\u00e7\u00e3o, ao mesmo tempo em que adota boas pr\u00e1ticas recomendadas pelo Google para desenvolvimento Android moderno.</p> <p>Essa base garante escalabilidade (que novas funcionalidades como tradu\u00e7\u00e3o, karaok\u00ea, e acesso offline) possam ser adicionadas sem comprometer a estrutura j\u00e1 existente.</p>"},{"location":"arquitetura/uml/","title":"Diagramas UML","text":"<ul> <li>Lista de diagramas </li> <li>Links e imagens</li> <li>PlantUML sources (opcional: anexar c\u00f3digos <code>.puml</code>)</li> </ul>"},{"location":"backend/backend/","title":"Backend \u2014 Reposit\u00f3rio e Execu\u00e7\u00e3o","text":"<ul> <li>Estrutura m\u00ednima do reposit\u00f3rio (lista de arquivos/dirs)</li> <li>Como executar local:</li> <li>configurar <code>.env</code></li> <li><code>./gradlew run</code> </li> <li>Endpoints dispon\u00edveis</li> </ul>"},{"location":"entrega/pc1/","title":"Entregas","text":""},{"location":"entrega/pc1/#pc1","title":"PC1","text":"<ul> <li>Checklist com todos os itens a entregar:</li> <li>[ ] Ambiente-locker</li> <li>[ ] BD dockerizado</li> <li>[ ] BD IDE</li> <li>[ ] Reposit\u00f3rio backend + uma US</li> <li>[ ] Arquitetura</li> <li>[x] Backlog (10 hist.)</li> <li>[ ] UML</li> <li>[ ] Testes (skipado)</li> <li>[ ] Prot\u00f3tipo (Figma)</li> </ul>"},{"location":"prototipo/prototipo/","title":"Prot\u00f3tipo (Figma V0)","text":"<ul> <li>Link para o arquivo Figma</li> <li>Telas inclu\u00eddas</li> <li>Screenshots</li> <li>Notas de design: paleta roxo (#6A0DAD) + preto, tipografia Roboto</li> <li>Link para o arquivo PDF</li> </ul>"},{"location":"requisitos/backlog/","title":"Backlog do Projeto","text":"<p>Este backlog foi estruturado a partir das elicita\u00e7\u00f5es de requisitos. Foram definidos Requisitos Funcionais (RF), transformados em Hist\u00f3rias de Usu\u00e1rio (US), agrupados em Features (F) e \u00c9picos (E). Al\u00e9m disso, foram listados Requisitos N\u00e3o Funcionais (RNF) que estabelecem crit\u00e9rios t\u00e9cnicos e de qualidade para o sistema.</p>"},{"location":"requisitos/backlog/#backlog-requisitos-funcionais","title":"Backlog \u2014 Requisitos Funcionais","text":"N\u00ba Requisito Funcional C\u00f3digo US C\u00f3digo Feature C\u00f3digo \u00c9pico RF01 Buscar letras por t\u00edtulo US01 F1.1 E1 RF02 Buscar letras por artista US02 F1.1 E1 RF03 Exibir a letra completa da m\u00fasica US03 F1.2 E1 RF04 Favoritar letras e listar favoritos US05, US06 F2.1 E2 RF05 Compartilhar letras com outros aplicativos US08 F3.1 E3 RF06 Exibir capa do \u00e1lbum junto da letra US04 F1.2 E1 RF07 Armazenar e exibir hist\u00f3rico de buscas US07 F2.2 E2 RF08 Oferecer tradu\u00e7\u00e3o da letra US10 F4.1 E4 RF09 Mostrar letra sincronizada com a m\u00fasica (karaok\u00ea) US11 F4.2 E4 RF10 Integrar o app com players externos (Spotify, YouTube) US12 F4.3 E4 RF11 Enviar notifica\u00e7\u00f5es sobre novidades de artistas favoritos US09 F3.2 E3 RF12 Permitir acesso offline \u00e0s letras j\u00e1 visualizadas US13 F4.4 E4"},{"location":"requisitos/backlog/#backlog-requisitos-nao-funcionais","title":"Backlog \u2014 Requisitos N\u00e3o Funcionais","text":"N\u00ba Requisito N\u00e3o Funcional RNF01 O app deve ser desenvolvido em Kotlin para Android. RNF02 O backend deve usar PostgreSQL dockerizado. RNF03 O sistema deve apresentar interface responsiva e fluida. RNF04 O app deve utilizar cores roxo e preto como identidade visual. RNF05 O tempo de resposta da busca deve ser inferior a 3 segundos."},{"location":"requisitos/backlog/#estrutura-de-identificacao","title":"Estrutura de Identifica\u00e7\u00e3o","text":"<ul> <li>\u00c9picos (E): </li> <li>E1 \u2014 Busca e Visualiza\u00e7\u00e3o de Letras  </li> <li>E2 \u2014 Personaliza\u00e7\u00e3o e Favoritos  </li> <li>E3 \u2014 Compartilhamento e Intera\u00e7\u00e3o  </li> <li> <p>E4 \u2014 Funcionalidades Avan\u00e7adas  </p> </li> <li> <p>Features (F): </p> </li> <li>F1.1 \u2014 Busca de m\u00fasicas  </li> <li>F1.2 \u2014 Visualiza\u00e7\u00e3o da letra  </li> <li>F2.1 \u2014 Favoritar m\u00fasicas  </li> <li>F2.2 \u2014 Hist\u00f3rico  </li> <li>F3.1 \u2014 Compartilhamento  </li> <li>F3.2 \u2014 Notifica\u00e7\u00f5es  </li> <li>F4.1 \u2014 Tradu\u00e7\u00e3o  </li> <li>F4.2 \u2014 Sincroniza\u00e7\u00e3o (karaok\u00ea)  </li> <li>F4.3 \u2014 Integra\u00e7\u00e3o com players externos  </li> <li>F4.4 \u2014 Acesso offline  </li> </ul>"},{"location":"requisitos/elicitacao/entrevista/","title":"Elicita\u00e7\u00e3o de Requisitos","text":"<p>Foi realizada uma entrevista com um stakeholder interessado no aplicativo de letras de m\u00fasica. A partir dessa entrevista foram coletadas percep\u00e7\u00f5es sobre funcionalidades essenciais, melhorias desejadas e ideias de diferenciais. Com base nas respostas, foi poss\u00edvel elicitar requisitos funcionais e n\u00e3o funcionais, al\u00e9m de organizar hist\u00f3rias de usu\u00e1rio, features e \u00e9picos.</p>"},{"location":"requisitos/elicitacao/entrevista/#perguntas-e-respostas-da-entrevista","title":"Perguntas e Respostas da Entrevista","text":""},{"location":"requisitos/elicitacao/entrevista/#funcionalidades-basicas","title":"Funcionalidades B\u00e1sicas","text":"<ul> <li> <p>Pergunta: O que n\u00e3o pode faltar no aplicativo de letras de m\u00fasica? Resposta: Deve ter busca por t\u00edtulo e por artista. Requisito Derivado: O sistema deve permitir busca de letras por t\u00edtulo ou artista.</p> </li> <li> <p>Pergunta: Gostaria que fosse poss\u00edvel favoritar letras? Resposta: Sim, seria importante para acessar depois. Requisito Derivado: O sistema deve permitir favoritar e listar letras favoritas.</p> </li> <li> <p>Pergunta: Deseja que o app permita compartilhar letras? Resposta: Sim, poder mandar para amigos seria \u00f3timo. Requisito Derivado: O sistema deve permitir compartilhar letras via outros apps.</p> </li> <li> <p>Pergunta: Voc\u00ea gostaria de ver a capa do \u00e1lbum junto da letra? Resposta: Sim, deixaria a experi\u00eancia mais completa. Requisito Derivado: O sistema deve exibir metadados da m\u00fasica (ex.: capa do \u00e1lbum).</p> </li> <li> <p>Pergunta: Acha \u00fatil poder consultar o hist\u00f3rico de buscas? Resposta: Sim, facilita encontrar m\u00fasicas que j\u00e1 procurei. Requisito Derivado: O sistema deve armazenar e mostrar hist\u00f3rico de pesquisas.</p> </li> </ul>"},{"location":"requisitos/elicitacao/entrevista/#funcionalidades-avancadas","title":"Funcionalidades Avan\u00e7adas","text":"<ul> <li> <p>Pergunta: Al\u00e9m de ver a letra, o que mais gostaria de ter na tela da m\u00fasica? Resposta: Seria legal ter tradu\u00e7\u00e3o dispon\u00edvel. Requisito Derivado: O sistema deve oferecer tradu\u00e7\u00e3o da letra (manual ou autom\u00e1tica).</p> </li> <li> <p>Pergunta: Gostaria que houvesse sincroniza\u00e7\u00e3o estilo karaok\u00ea? Resposta: Sim, se poss\u00edvel mostrar a letra acompanhando a m\u00fasica. Requisito Derivado: O sistema deve oferecer visualiza\u00e7\u00e3o da letra sincronizada com a m\u00fasica.</p> </li> <li> <p>Pergunta: E se o app tivesse integra\u00e7\u00e3o com Spotify ou YouTube? Resposta: Seria \u00f3timo abrir a letra junto com a m\u00fasica que estou ouvindo. Requisito Derivado: O sistema deve permitir integra\u00e7\u00e3o com players externos.</p> </li> <li> <p>Pergunta: Acha \u00fatil ter notifica\u00e7\u00f5es de artistas favoritos? Resposta: Sim, quero ser avisado quando sair algo novo. Requisito Derivado: O sistema deve enviar notifica\u00e7\u00f5es sobre novidades dos artistas favoritos.</p> </li> <li> <p>Pergunta: Gostaria de poder usar o app offline? Resposta: Sim, pelo menos para letras j\u00e1 visualizadas. Requisito Derivado: O sistema deve permitir acesso offline \u00e0s letras j\u00e1 carregadas.</p> </li> </ul>"},{"location":"requisitos/elicitacao/entrevista/#requisitos-elicitados","title":"Requisitos Elicitados","text":""},{"location":"requisitos/elicitacao/entrevista/#requisitos-funcionais-rf","title":"Requisitos Funcionais (RF)","text":"<ol> <li>RF01 \u2014 Buscar letras por t\u00edtulo.  </li> <li>RF02 \u2014 Buscar letras por artista.  </li> <li>RF03 \u2014 Exibir a letra completa da m\u00fasica.  </li> <li>RF04 \u2014 Favoritar letras e listar favoritos.  </li> <li>RF05 \u2014 Compartilhar letras com outros aplicativos.  </li> <li>RF06 \u2014 Exibir capa do \u00e1lbum junto da letra.  </li> <li>RF07 \u2014 Armazenar e exibir hist\u00f3rico de buscas.  </li> <li>RF08 \u2014 Oferecer tradu\u00e7\u00e3o da letra.  </li> <li>RF09 \u2014 Mostrar letra sincronizada com a m\u00fasica (karaok\u00ea).  </li> <li>RF10 \u2014 Integrar o app com players externos (Spotify, YouTube).  </li> <li>RF11 \u2014 Enviar notifica\u00e7\u00f5es sobre novidades de artistas favoritos.  </li> <li>RF12 \u2014 Permitir acesso offline \u00e0s letras j\u00e1 visualizadas.  </li> </ol>"},{"location":"requisitos/elicitacao/entrevista/#requisitos-nao-funcionais-rnf","title":"Requisitos N\u00e3o Funcionais (RNF)","text":"<ol> <li>RNF01 \u2014 O app deve ser desenvolvido em Kotlin para Android.  </li> <li>RNF02 \u2014 O backend deve usar PostgreSQL dockerizado.  </li> <li>RNF03 \u2014 O sistema deve apresentar interface responsiva e fluida.  </li> <li>RNF04 \u2014 O app deve utilizar cores roxo e preto como identidade visual.  </li> <li>RNF05 \u2014 O tempo de resposta da busca deve ser inferior a 3 segundos.  </li> </ol>"},{"location":"requisitos/elicitacao/entrevista/#organizacao-em-epicos-features-e-historias-de-usuario","title":"Organiza\u00e7\u00e3o em \u00c9picos, Features e Hist\u00f3rias de Usu\u00e1rio","text":""},{"location":"requisitos/elicitacao/entrevista/#epico-1-busca-e-visualizacao-de-letras","title":"\u00c9pico 1: Busca e Visualiza\u00e7\u00e3o de Letras","text":"<ul> <li>Feature 1.1: Busca de m\u00fasicas  </li> <li>US01: Como usu\u00e1rio, quero buscar letras por t\u00edtulo, para encontrar a m\u00fasica que desejo.  </li> <li> <p>US02: Como usu\u00e1rio, quero buscar letras por artista, para visualizar m\u00fasicas relacionadas.  </p> </li> <li> <p>Feature 1.2: Visualiza\u00e7\u00e3o da letra  </p> </li> <li>US03: Como usu\u00e1rio, quero visualizar a letra completa da m\u00fasica selecionada.  </li> <li>US04: Como usu\u00e1rio, quero ver a capa do \u00e1lbum junto da letra para uma experi\u00eancia mais rica.  </li> </ul>"},{"location":"requisitos/elicitacao/entrevista/#epico-2-personalizacao-e-favoritos","title":"\u00c9pico 2: Personaliza\u00e7\u00e3o e Favoritos","text":"<ul> <li>Feature 2.1: Favoritar m\u00fasicas  </li> <li>US05: Como usu\u00e1rio, quero favoritar letras para acess\u00e1-las rapidamente depois.  </li> <li> <p>US06: Como usu\u00e1rio, quero acessar uma lista de favoritos em uma aba dedicada.  </p> </li> <li> <p>Feature 2.2: Hist\u00f3rico  </p> </li> <li>US07: Como usu\u00e1rio, quero acessar um hist\u00f3rico de buscas para reutilizar pesquisas recentes.  </li> </ul>"},{"location":"requisitos/elicitacao/entrevista/#epico-3-compartilhamento-e-interacao","title":"\u00c9pico 3: Compartilhamento e Intera\u00e7\u00e3o","text":"<ul> <li>Feature 3.1: Compartilhamento  </li> <li> <p>US08: Como usu\u00e1rio, quero compartilhar letras via outros aplicativos (WhatsApp, Instagram etc.).  </p> </li> <li> <p>Feature 3.2: Notifica\u00e7\u00f5es  </p> </li> <li>US09: Como usu\u00e1rio, quero receber notifica\u00e7\u00f5es quando sair algo novo de um artista favorito.  </li> </ul>"},{"location":"requisitos/elicitacao/entrevista/#epico-4-funcionalidades-avancadas","title":"\u00c9pico 4: Funcionalidades Avan\u00e7adas","text":"<ul> <li>Feature 4.1: Tradu\u00e7\u00e3o  </li> <li> <p>US10: Como usu\u00e1rio, quero visualizar a tradu\u00e7\u00e3o da letra para outro idioma.  </p> </li> <li> <p>Feature 4.2: Sincroniza\u00e7\u00e3o (karaok\u00ea)  </p> </li> <li> <p>US11: Como usu\u00e1rio, quero acompanhar a letra em tempo real enquanto a m\u00fasica toca.  </p> </li> <li> <p>Feature 4.3: Integra\u00e7\u00e3o com players externos  </p> </li> <li> <p>US12: Como usu\u00e1rio, quero abrir a letra automaticamente quando escutar uma m\u00fasica no Spotify/YouTube.  </p> </li> <li> <p>Feature 4.4: Acesso offline  </p> </li> <li>US13: Como usu\u00e1rio, quero acessar letras j\u00e1 abertas mesmo sem internet.  </li> </ul>"},{"location":"testes/testes/","title":"Testes","text":"<ul> <li>Estrat\u00e9gia de testes (unit/integration)</li> <li>Observa\u00e7\u00e3o: testes est\u00e3o presente mas marcados como skip/disabled para o PC1.</li> <li>to do Exemplo de arquivo de teste</li> <li>to do Como executar (CI/locally)</li> </ul>"}]}